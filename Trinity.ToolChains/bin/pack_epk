#!/usr/bin/env python3

import os
import sys
import zipfile
import argparse

parser = argparse.ArgumentParser(description='Create an EPK file for Elastos DApp.')
parser.add_argument('epk_file', metavar='EPK_FILE',
                    help='specify the EPK file to be created')
parser.add_argument('-m', '--manifest', dest='manifest_file', metavar='MANIFEST_FILE',
                    help='specify the manifest file for the DApp')
parser.add_argument('-r', '--root-dir', dest='root_dir', metavar='ROOT_DIR',
                    help='specify the root directory of the DApp')

args = parser.parse_args()

manifest_name = "manifest.json"

try:
    zipf = zipfile.ZipFile(args.epk_file, 'w', zipfile.ZIP_DEFLATED)

    if not args.manifest_file and not args.root_dir:
        raise RuntimeError("Please specify at least one option: --manifest or --root-dir.")

    have_manifest = False

    if args.manifest_file:
        if not os.path.isfile(args.manifest_file):
            raise RuntimeError("The MANIFEST_FILE is not a file.")

        zipf.write(args.manifest_file, manifest_name)
        have_manifest = True

    if args.root_dir:
        if not os.path.isdir(args.root_dir):
            raise RuntimeError("The ROOT_DIR is not a directory.")

        for root, subdirs, files in os.walk(args.root_dir):
            for file in files:
                fullpath = os.path.join(root, file)
                relpath = os.path.relpath(fullpath, args.root_dir)
                if relpath == manifest_name:
                    if have_manifest and fullpath != args.manifest_file:
                        # Skip the "manifest.json" file in the root directory as we already
                        # use the --manifest option to specify the MANIFEST_FILE.
                        print('Skipping "' + fullpath + '", use "' + args.manifest_file + '" instead.')
                    have_manifest = True
                print('Packing ' + relpath)
                zipf.write(fullpath, relpath)

    zipf.close()

    if not have_manifest:
        raise RuntimeError('Could not find "' + manifest_name + '". Please use --manifest option to specify one.')

    print('Done')

except RuntimeError as err:
    print("Error: " + err.args[0])
    if os.path.exists(args.epk_file):
        os.remove(args.epk_file)
    print("       Use --help option for more help.")
    exit()
except:
    print("Unexpected error:", sys.exc_info()[0])
    if os.path.exists(args.epk_file):
        os.remove(args.epk_file)
    exit()

