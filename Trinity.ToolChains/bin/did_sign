#!/usr/bin/env python3

import os
import sys
import zipfile
import argparse
import hashlib
import getpass
import ctypes
import time


sys.path.append(os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + '/../lib'))
import ela_did

did_api = ela_did.getElaDIDAPI()

parser = argparse.ArgumentParser(description='Sign an EPK file with given DID URL for Elastos DApp.')
parser.add_argument('epk_file', metavar='EPK_FILE',
                    help='specify the EPK file to be signed')
parser.add_argument('-r', '--root', dest='did_store_root', metavar='PATH', required=True,
                    help='Specify the root path of DID store.')
parser.add_argument('-u', '--didurl', dest='didurl_str', required=True,
                    help='Specify the DID URL to be used for signing.')
parser.add_argument('-s', '--storepass', dest='storepass', default="",
                    help='The password to sign.')
parser.add_argument('-o', '--output', dest='output_file', metavar='OUTPUT_FILE',
                    help='Optional output file. Default to in place sign the input file.')

args = parser.parse_args()

sign_folder_prefix = "EPK-SIGN/"
manifest_name = "manifest.json"

try:
    def adapter_createIdTransactionCallback(adapter, payload, memo):
        return 0 # Success

    def adapter_resolveCallback(adapter, did):
        return None # Don't resolve any existing DID from sidechain from this tool

    #print(args.epk_file.encode('utf-8'))

    if args.output_file:
        zip2read = zipfile.ZipFile(args.epk_file, 'r', zipfile.ZIP_DEFLATED)
        zip2write = zipfile.ZipFile(args.output_file, 'w', zipfile.ZIP_DEFLATED)
    else:
        zip2read = zipfile.ZipFile(args.epk_file, 'a', zipfile.ZIP_DEFLATED)
        zip2write = zip2read

    filelist = zip2read.namelist()

    if not any(filename == manifest_name for filename in filelist):
        raise RuntimeError('Could not find "' + manifest_name + '". Not an EPK file?')

    if any(filename.startswith(sign_folder_prefix) for filename in filelist):
        raise RuntimeError('The EPK file already signed.')

    if not args.storepass:
        password = getpass.getpass("Password to sign: ")
    else:
        password = args.storepass

    # Filter out directories
    filelist = list(filter( lambda f: not f.endswith('/'), filelist ))
    filelist.sort()

    filelist_sha = ""
    for filename in filelist:
        with zip2read.open(filename) as myfile:
            file_sha = hashlib.sha256()
            file_buffer = myfile.read()
            #print("Computing digest " + filename)
            file_sha.update(file_buffer)
            filelist_sha += file_sha.hexdigest() + " " + filename + "\n"
            if zip2read != zip2write:
                zip2write.writestr(filename, file_buffer)

    # print(filelist_sha)
    zip2write.writestr(sign_folder_prefix + "FILELIST.INF", filelist_sha)

    epk_sha = hashlib.sha256()
    epk_sha.update(filelist_sha.encode('utf-8'))

    zip2write.writestr(sign_folder_prefix + "FILELIST.SHA", epk_sha.hexdigest())

    # print("The SHA-265 digest of the EPK content is:\n    " + epk_sha.hexdigest())

    # Signing
    print("Signing EPK file")
    message = epk_sha.hexdigest().encode('utf-8')

    # Create an adapter for resolve() and createIdTransaction().
    adapter = ela_did.DIDAdapter(ela_did.CREATE_ID_TRANSACTION_FUNC(adapter_createIdTransactionCallback), ela_did.RESOLVE_FUNC(adapter_resolveCallback))

    didStore = did_api.DIDStore_Initialize(args.did_store_root.encode('utf-8'), ctypes.pointer(adapter))
    if didStore == None:
        raise RuntimeError("Failed to open DID store.")

    didurl = did_api.DIDURL_FromString(args.didurl_str.encode('utf-8'), None)
    if didurl == None:
        raise RuntimeError("Failed to get DID URL from string.")

    did = did_api.DIDURL_GetDid(didurl)
    if did == None:
        raise RuntimeError("Failed to get DID from DID URL.")

    diddoc = did_api.DIDStore_LoadDID(didStore, did)
    if diddoc == None:
        diddoc = did_api.DIDStore_ResolveDID(didStore, did, True)
        if diddoc == None:
            raise RuntimeError("Unable to find the requested DID either in local store or on DID sidechain.")
    
    signature = ctypes.create_string_buffer(did_api.SIGNATURE_LENGTH)
    ret = did_api.DIDStore_Sign(didStore, did, didurl, password.encode('utf-8'), signature, 1, message, len(message))
    if ret != 0:
        raise RuntimeError("Failed to sign EPK.")
    zip2write.writestr(sign_folder_prefix + "FILELIST.SIGN", signature.raw)

    public_key = did_api.DIDDocument_GetPublicKey(diddoc, didurl)
    public_key_base58 = did_api.PublicKey_GetPublicKeyBase58(public_key)
    zip2write.writestr(sign_folder_prefix + "SIGN.PUB", public_key_base58)
    zip2write.writestr(sign_folder_prefix + "SIGN.DIDURL", args.didurl_str)

    zip2read.close()
    if zip2read != zip2write:
        zip2write.close()

    print("Done")
except RuntimeError as err:
    print("Error: " + err.args[0])
    if args.output_file and os.path.exists(args.output_file):
        os.remove(args.output_file)
    exit(2)
except Exception as err:
    print("Error: " + str(err))
    exc_type, exc_obj, exc_tb = sys.exc_info()
    print("Unexpected error: ", exc_type)
    print(' File "' + exc_tb.tb_frame.f_code.co_filename + '", line ' + str(exc_tb.tb_lineno))
    if args.output_file and os.path.exists(args.output_file):
        os.remove(args.output_file)
    exit(3)

